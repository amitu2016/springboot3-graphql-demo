type Query {
    # our first gql query
    firstQuery: String

    #our second gql query
    secondQuery(firstName: String!, lastName: String) : String

    #get all students records
    getAllStudents: [StudentResponse]

    #get all teachers records
    getAllTeachers: [TeacherResponse]

    #get all the members records with filtering options for students and teachers
    getAllMembers(filter: MemberType): [MemberResponse]

    searchByName(name: String!): [MemberSearchResult]
}



enum MemberType {
    STUDENT
    TEACHER
}

type MemberResponse {
    id: ID!
    name: String!
    contact: String
    type: MemberType!
    subjectData: [SubjectResponse]
}

interface SubjectResponse {
    subjectName: String!
}

type StudentSubjectResponse implements SubjectResponse{
    subjectName: String!
    marks: Float
}

type TeacherSubjectResponse implements SubjectResponse{
    subjectName: String!
    yearsOfExperience: Int
}

type StudentResponse {
    id: ID!
    name: String!
    contact: String
    result: [StudentSubjectResponse]
   }


type TeacherResponse {
    id: ID!
    name: String!
    contact: String
    subject: [TeacherSubjectResponse]
   }

union SearchResult = StudentSubjectResponse | TeacherSubjectResponse

type MemberSearchResult {
    id: ID!
    name: String!
    contact: String
    type: MemberType!
    subjectData: [SearchResult]
}
